/* ===========================
    Helpers de red y multimedia
    =========================== */

// Detectar si la conexi√≥n es celular para ajustar timeout
function isCellular() {
  const c = navigator.connection || navigator.webkitConnection || navigator.mozConnection;
  return !!(c && (c.type === 'cellular' || (c.effectiveType && /2g|3g|slow-2g/.test(c.effectiveType))));
}

// Comprimir imagen ANTES de pasarla a base64 (mismo campo `foto` que ya us√°s)
async function compressFileToBase64(file, maxW = 1200, quality = 0.7) {
  // si no es imagen o es muy chica, seguimos como antes
  if (!file.type || !file.type.startsWith('image/')) {
    return convertirImagenABase64(file); // tu funci√≥n actual
  }
  const img = await new Promise((res, rej) => {
    const o = new Image();
    o.onload = () => res(o);
    o.onerror = rej;
    o.src = URL.createObjectURL(file);
  });
  const origW = img.naturalWidth || img.width || maxW;
  const origH = img.naturalHeight || img.height || maxW;
  const scale = Math.min(1, maxW / origW);
  // si ya es chica, no tocamos nada
  if (scale >= 1) return convertirImagenABase64(file);

  const w = Math.round(origW * scale);
  const h = Math.round(origH * scale);
  const canvas = document.createElement('canvas');
  canvas.width = w; canvas.height = h;
  const ctx = canvas.getContext('2d');
  ctx.drawImage(img, 0, 0, w, h);
  const dataUrl = canvas.toDataURL('image/jpeg', quality);
  return dataUrl.split(',')[1]; // base64 (igual que tu funci√≥n actual)
}


/* --- MODIFICACI√ìN PRINCIPAL --- */
// Wrapper de fetch con timeout extendido a 45 segundos + reintentos.
async function fetchJSONWithRetry(url, options, {
  tries = 3,
  // Aumentamos el timeout a 45 segundos para darle m√°s tiempo al servidor de n8n.
  timeoutMs = 45000 
} = {}) {
  let wait = 800;
  for (let i = 0; i < tries; i++) {
    const ctrl = new AbortController();
    const t = setTimeout(() => ctrl.abort(), timeoutMs);
    try {
      const res = await fetch(url, { ...options, signal: ctrl.signal, cache: 'no-store', keepalive: true });
      clearTimeout(t);
      if (!res.ok) throw new Error('HTTP ' + res.status);
      const text = await res.text();
      // Intenta parsear como JSON, si falla, devuelve el texto crudo.
      try { return text ? JSON.parse(text) : {}; } catch { return { raw: text }; }
    } catch (e) {
      clearTimeout(t);
      // Si este es el √∫ltimo intento, lanza el error para que se vea en la UI.
      if (i === tries - 1) throw e;
      // Espera un poco antes de reintentar.
      await new Promise(s => setTimeout(s, wait));
      wait = Math.min(wait * 2, 4000); // Aumenta la espera en cada reintento
    }
  }
}


/* ===========================
    Datos de usuarios / sectores
    =========================== */

// üß† BASE DE DATOS LOCAL DE USUARIOS
const usuarios = {
  gaston: "gaston1",
  adm: "adm1", // SUPERADMIN

  // Admins por patrulla
  admin_laplata: "adminlp1",
  admin_cordoba: "admincba1",
  admin_rioiv: "adminrio1",
  admin_bahiablanca: "adminbb1",
  admin_sanluis: "adminsl1",
  admin_salta: "adminsa1",
  admin_tucuman: "admintuc1",

  // Nuevos usuarios administrativos (pueden ser SUPERADMIN si quer√©s)
  behm: "behm123",
  bocchetto: "boc123",
  bucala: "bucala123",
  chiner: "chiner123",
  estebaneugenia: "estebaneugenia1",
  estebanluciana: "estebanluciana",
  fernandezgaston: "fernandezgaston1",
  fernandezjuan: "fernandezjuan1",
  laubert: "laubert123",
  machaca: "machaca123",
  vaghioscar: "vaghioscar123",
  vaghipablo: "vaghipablo123",
  vaghiroque: "vaghiroque456",

  // Usuarios t√©cnicos
  aguirrez: "aguirrez1",
  alarcon: "alarcon1",
  alejo: "alejo1",
  aranda: "aranda1",
  barraza: "barraza1",
  batistini: "batistini1",
  beltran: "beltran123",
  caceres: "caceres123",
  calderon: "calderon1",
  cancino: "cancino123",
  ca√±ette: "ca√±ette123",
  ceballos: "ceballos1",
  cimino: "cimino123",
  cruz: "cruz123",
  diazluis: "diazluis1",
  diazmanuel: "diazmanuel1",
  figueroa: "figueroa1",
  galeassialexis: "galeassialexis1",
  galeassieric: "galeassieric1",
  gallegos: "gallegos123",
  griecco: "griecco123",
  gutierrez: "gutierrez123",
  iglesiaspedro: "iglesiaspedro",
  iglesiashugo: "iglesiashugo",
  kunz: "kunz123",
  lagos: "lagos123",
  madariaga: "madariaga123",
  mas: "mas123",
  medinaalvaro: "medinaalvaro",
  medinaenzo: "medinaenzo",
  navarro: "navarro123",
  nieva: "nieva123",
  olleta: "olleta123",
  ortizalejandro: "ortiz123",
  ortizoscar: "ortiz456",
  paz: "paz123",
  presentado: "presentado123",
  quintaye: "quintaye123",
  quiroga: "quiroga123",
  rios: "rios123",
  ruiz: "ruiz123",
  sanchez: "sanchez123",
  sartori: "sartori123",
  serrano: "serrano123",
  tejedaadrian: "tejedaadrian",
  tejedaaldo: "tejedaaldo",
  trovato: "trovato123",
  vaghiroque: "vaghi",
  zelaya: "zelaya"
};

// üßë‚Äç‚öñÔ∏è ROLES
const userRole = {
  adm: "SUPERADMIN",
  admin_laplata: "ADMIN",
  admin_cordoba: "ADMIN",
  admin_rioiv: "ADMIN",
  admin_bahiablanca: "ADMIN",
  admin_sanluis: "ADMIN",
  admin_salta: "ADMIN",
  admin_tucuman: "ADMIN",
};

const getRole = (u) => userRole[u] || "TECNICO";

// üß≠ SECTOR (PATRULLA) POR USUARIO
const userSector = {
  admin_laplata: "LA PLATA",
  admin_cordoba: "C√ìRDOBA",
  admin_rioiv: "R√çO IV",
  admin_bahiablanca: "BAH√çA BLANCA",
  admin_sanluis: "SAN LUIS",
  admin_salta: "SALTA",
  admin_tucuman: "TUCUM√ÅN",
  vaghiroque: "TUCUM√ÅN",
  aguirrez: "LA PLATA",
  alejo: "LA PLATA",
  mas: "LA PLATA",
  ortizalejandro: "LA PLATA",
  ortizoscar: "LA PLATA",
  sartori: "LA PLATA",
  alarcon: "TUCUM√ÅN",
  beltran: "TUCUM√ÅN",
  cruz: "TUCUM√ÅN",
  gutierrez: "TUCUM√ÅN",
  medinaalvaro: "TUCUM√ÅN",
  navarro: "TUCUM√ÅN",
  nieva: "TUCUM√ÅN",
  olleta: "TUCUM√ÅN",
  paz: "TUCUM√ÅN",
  ruiz: "TUCUM√ÅN",
  serrano: "TUCUM√ÅN",
  zelaya: "TUCUM√ÅN",
  aranda: "C√ìRDOBA",
  barraza: "C√ìRDOBA",
  caceres: "C√ìRDOBA",
  calderon: "C√ìRDOBA",
  ca√±ette: "C√ìRDOBA",
  galeassialexis: "C√ìRDOBA",
  galeassieric: "C√ìRDOBA",
  gallegos: "C√ìRDOBA",
  griecco: "C√ìRDOBA",
  iglesiaspedro: "C√ìRDOBA",
  iglesiashugo: "C√ìRDOBA",
  presentado: "C√ìRDOBA",
  quiroga: "C√ìRDOBA",
  rios: "C√ìRDOBA",
  sanchez: "C√ìRDOBA",
  tejedaadrian: "C√ìRDOBA",
  batistini: "R√çO IV",
  ceballos: "R√çO IV",
  figueroa: "R√çO IV",
  kunz: "R√çO IV",
  lagos: "R√çO IV",
  quintaye: "BAH√çA BLANCA",
  trovato: "BAH√çA BLANCA",
  cancino: "SAN LUIS",
  cimino: "SALTA",
  diazluis: "SALTA",
  diazmanuel: "SALTA",
  madariaga: "SALTA",
  medinaenzo: "TUCUM√ÅN",
};

const getSector = (u) => userSector[u] || null;

// üöó PATENTES POR SECTOR
const sectorPatentes = {
  "LA PLATA": ["AA317PM", "AA420JU", "AH280OQ", "AH571SO", "NEO135", "PDY875", "PKZ249"],
  "TUCUM√ÅN": ["AB403NQ", "AC079TW", "AD964TK", "AE017FB", "AH335IM", "NWX351", "PQE699"],
  "C√ìRDOBA": ["AA980XO","AB861HC","AC111MD","AD964TJ","AE327LO","AE464FY","AE683IX","AE727HQ","AF766ZB","AG883IG","AH335FM","ITJ845","IUY548","IVZ434","NEO134","OPC046","OXJ953"],
  "R√çO IV": ["AB794YT", "AG727MO"],
  "BAH√çA BLANCA": ["AA925PQ", "OIC618"],
  "SAN LUIS": ["AE287YW"],
  "SALTA": ["AH017QS", "KDG674", "OUM376"]
};

// üß© Utilidad: lista total de patentes (fallback)
const TODAS_LAS_PATENTES = Array.from(new Set(Object.values(sectorPatentes).flat()));


/* ===========================
    L√≥gica de UI / acciones
    =========================== */

// üîê LOGIN
function login() {
  const username = document.getElementById("username").value.trim().toLowerCase();
  const pass = document.getElementById("password").value.trim();

  if (!username || !pass) return mostrarMensaje("‚ùó Por favor complet√° ambos campos.", true);
  if (!(username in usuarios)) return mostrarMensaje("üö´ Usuario no registrado.", true);
  if (usuarios[username] !== pass) return mostrarMensaje("üîë Contrase√±a incorrecta.", true);

  const role = getRole(username);

  document.getElementById("panelMensajes")?.classList.add("hidden");
  document.getElementById("contenidoMensaje").innerHTML = "";
  document.getElementById("loginScreen").classList.add("hidden");
  document.getElementById("dashboard").classList.remove("hidden");
  document.getElementById("employeeName").textContent = username;

  const patrullaUser = getSector(username) || (role === "SUPERADMIN" ? "TODAS" : "SIN PATRULLA");
  document.getElementById("employeePatrulla").textContent = patrullaUser;

  document.getElementById("kmFormBtn").classList.remove("hidden");
  document.getElementById("etiquetaFormBtn").classList.remove("hidden");
  document.getElementById("adminBtn").classList.toggle("hidden", !(role === "ADMIN" || role === "SUPERADMIN"));

  localStorage.setItem("username", username);
  populatePatentesForUser(username);
}

// üîÅ MOSTRAR FORMULARIOS
function showKmForm() {
  const username = document.getElementById("employeeName").textContent;
  populatePatentesForUser(username);
  document.getElementById("dashboard").classList.add("hidden");
  document.getElementById("kmForm").classList.remove("hidden");
  document.getElementById("fotoOdometro").value = "";
  document.getElementById("fotoPreview").style.display = "none";
}

function showEtiquetaForm() {
  document.getElementById("dashboard").classList.add("hidden");
  document.getElementById("etiquetaForm").classList.remove("hidden");
  document.getElementById("cantidadEtiquetas").value = "";
  document.getElementById("etiquetasAsignadas").style.display = "none";
}

function showCargaEtiquetas() {
  document.getElementById("dashboard").classList.add("hidden");
  document.getElementById("registroEtiquetasForm").classList.remove("hidden");
}

function volver() {
  document.getElementById("kmForm").classList.add("hidden");
  document.getElementById("etiquetaForm").classList.add("hidden");
  document.getElementById("registroEtiquetasForm").classList.add("hidden");
  document.getElementById("panelMisEtiquetas").classList.add("hidden");
  document.getElementById("panelMensajes").classList.add("hidden");
  document.getElementById("dashboard").classList.remove("hidden");
}

function ocultarTodosLosFormularios() {
  document.getElementById("kmForm").classList.add("hidden");
  document.getElementById("etiquetaForm").classList.add("hidden");
  document.getElementById("registroEtiquetasForm").classList.add("hidden");
  document.getElementById("panelMisEtiquetas").classList.add("hidden");
  document.getElementById("dashboard").classList.add("hidden");
}

// üëâ Rellena el <select id="patente"> con las patentes del sector del usuario
function populatePatentesForUser(username) {
  const select = document.getElementById("patente");
  if (!select) return;

  const role = getRole(username);
  const sector = getSector(username);
  let patentes = [];

  if (role === "SUPERADMIN") {
    patentes = TODAS_LAS_PATENTES;
  } else {
    patentes = sector && sectorPatentes[sector] ? sectorPatentes[sector] : TODAS_LAS_PATENTES;
  }

  select.innerHTML = "";
  if (patentes.length === 0) {
    const opt = document.createElement("option");
    opt.textContent = "Sin patentes disponibles";
    opt.value = "";
    select.appendChild(opt);
  } else {
    patentes.forEach((p) => {
      const opt = document.createElement("option");
      opt.textContent = p;
      opt.value = p;
      select.appendChild(opt);
    });
  }
}

/* ===========================
    Env√≠os: KM / Etiquetas
    =========================== */

// ‚úÖ ENVIAR REGISTRO DE KM
async function enviarKM() {
  const empleado = document.getElementById("employeeName").textContent;
  const patente = document.getElementById("patente").value;
  const kmFinal = document.getElementById("kmFinal").value;
  const fotoInput = document.getElementById("fotoOdometro");
  const fechaHora = new Date().toLocaleString();

  if (!patente || !kmFinal || !fotoInput.files[0]) {
    mostrarMensaje("üöóüì∑ Complet√° todos los campos, incluyendo la foto.", true);
    return;
  }

  mostrarMensaje("‚è≥ Enviando registro...", false, true);

  const datos = {
    funcion: "registro_km",
    usuario: empleado,
    patrulla: getSector(empleado) || "",
    patente: patente,
    km_final: kmFinal,
    fecha: fechaHora,
    foto_km: await compressFileToBase64(fotoInput.files[0], 1200, 0.7)
  };

  try {
    if (enviarKM._inflight) return;
    enviarKM._inflight = true;

    const respuesta = await fetchJSONWithRetry(
      "https://fluxian8n-n8n.mpgtdy.easypanel.host/webhook/79ad7cbc-afc5-4d9b-967f-4f187d028a20",
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(datos)
      }
    );

    const mensaje = respuesta?.Mensaje || (respuesta?.raw || "Respuesta desconocida del servidor.");
    if (mensaje === "Registro guardado correctamente") {
      mostrarMensaje(`‚úÖ ¬°Registro exitoso!<br><b>Patente:</b> ${patente}<br><b>KM:</b> ${kmFinal}`);
      document.getElementById("kmForm").reset();
      document.getElementById("fotoPreview").style.display = "none";
    } else {
      mostrarMensaje(`‚ùå Error: ${mensaje}`, true);
    }
  } catch (error) {
    console.error("‚ùå Error en enviarKM:", error);
    mostrarMensaje("‚ùå Conexi√≥n inestable: No se pudo enviar. Reintent√° en unos segundos.", true);
  } finally {
    enviarKM._inflight = false;
  }
}

// üè∑Ô∏è PEDIR ETIQUETAS
async function enviarEtiqueta() {
  const empleado = document.getElementById("employeeName").textContent;
  const cantidad = parseInt(document.getElementById("cantidadEtiquetas").value);
  const fechaHora = new Date().toLocaleString();

  if (isNaN(cantidad) || cantidad < 1) {
    mostrarMensaje("‚ö†Ô∏è ¬°Ingres√° una cantidad v√°lida!", true);
    return;
  }

  if (enviarEtiqueta._inflight) return;
  enviarEtiqueta._inflight = true;

  try {
    mostrarMensaje("‚è≥ Pidiendo etiquetas al servidor... Esto puede tardar...", false, true);

    const payload = {
      funcion: "pedir_etiquetas",
      usuario: empleado,
      patrulla: getSector(empleado) || "",
      cantidad: cantidad,
      fecha: fechaHora
    };

    const data = await fetchJSONWithRetry(
      "https://fluxian8n-n8n.mpgtdy.easypanel.host/webhook/79ad7cbc-afc5-4d9b-967f-4f187d028a20",
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      }
    );

    const etiquetasDiv = document.getElementById("etiquetasAsignadas");
    const listaUl = document.getElementById("listaEtiquetas");
    listaUl.innerHTML = "";

    if (!data.etiquetas || (Array.isArray(data.etiquetas) && data.etiquetas.length === 0)) {
        etiquetasDiv.style.display = "none";
        // Si el servidor env√≠a un mensaje espec√≠fico de "no hay", lo mostramos.
        const msgServidor = data.etiquetas === "No hay tickets disponibles." ? data.etiquetas : "‚ö†Ô∏è No hay etiquetas disponibles en este momento.";
        mostrarMensaje(msgServidor, true);
        return;
    }
    
    const etiquetas = Array.isArray(data.etiquetas) ? data.etiquetas : [data.etiquetas];
    etiquetasDiv.style.display = "block";
    etiquetas.forEach((etq) => {
      const li = document.createElement("li");
      li.textContent = etq;
      listaUl.appendChild(li);
    });
    
    let msg = `‚úÖ Pedido procesado.<br><b>Etiquetas asignadas:</b><br>${etiquetas.join("<br>")}`;
    if (etiquetas.length < cantidad) {
      msg += `<br><br><b>‚ö†Ô∏è Atenci√≥n:</b> Solo hab√≠a ${etiquetas.length} disponibles.`;
    }
    mostrarMensaje(msg);

  } catch (err) {
    console.error("‚ùå Error al pedir etiquetas:", err);
    mostrarMensaje("‚ùå Fall√≥ la conexi√≥n al pedir etiquetas. Reintent√°.", true);
  } finally {
    enviarEtiqueta._inflight = false;
  }
}


// ‚úÖ REGISTRAR NUEVAS ETIQUETAS (ADMIN)
async function registrarEtiquetas() {
  const desde = parseInt(document.getElementById("etiquetaInicio").value);
  const hasta = parseInt(document.getElementById("etiquetaFin").value);
  const empleado = document.getElementById("employeeName").textContent;
  const fechaHora = new Date().toLocaleString();

  if (isNaN(desde) || isNaN(hasta) || desde < 0 || hasta < desde) {
    mostrarMensaje("‚ùå Por favor ingres√° un rango v√°lido.", true);
    return;
  }

  const etiquetas = [];
  for (let i = desde; i <= hasta; i++) {
    etiquetas.push(`ETQ-${String(i).padStart(3, "0")}`);
  }

  const datos = {
    funcion: "registro_etiquetas_admin",
    usuario: empleado,
    patrulla: getSector(empleado) || "",
    fecha: fechaHora,
    etiquetas
  };

  mostrarMensaje("‚è≥ Registrando nuevas etiquetas...", false, true);

  try {
    const respuesta = await fetchJSONWithRetry(
        "https://fluxian8n-n8n.mpgtdy.easypanel.host/webhook/79ad7cbc-afc5-4d9b-967f-4f187d028a20",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(datos)
        }
      );
      
    const mensaje = respuesta?.Mensaje || "Respuesta no reconocida.";
    if (mensaje.includes("correctamente")) {
        mostrarMensaje(`‚úÖ ${mensaje}`);
    } else {
        mostrarMensaje(`‚ùå Error: ${mensaje}`, true);
    }
  } catch (err) {
    console.error("‚ùå Error al registrar etiquetas:", err);
    mostrarMensaje("‚ùå No se pudo conectar con el servidor para registrar.", true);
  }
}

/* ===========================
    Utilitarios de UI y Auxiliares
    =========================== */

// üéØ PANEL DE MENSAJES
function mostrarMensaje(mensaje, esError = false, esLoader = false) {
  const panel = document.getElementById("panelMensajes");
  const contenido = document.getElementById("contenidoMensaje");

  contenido.innerHTML = esLoader ? `<div class="loader"></div><br>${mensaje}` : mensaje;
  contenido.className = esError ? 'mensaje-error' : 'mensaje-exito';
  
  ocultarTodosLosFormularios();
  panel.classList.remove("hidden");
}

// üîÑ AUXILIAR
function convertirImagenABase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result.split(",")[1]);
    reader.onerror = (error) => reject(error);
    reader.readAsDataURL(file);
  });
}

/* ===========================
    Historial de etiquetas
    =========================== */

async function obtenerHistorialEtiquetas() {
  const username = document.getElementById("employeeName").textContent;
  mostrarMensaje("Consultando historial...", false, true);

  try {
    const respuesta = await fetchJSONWithRetry(
        "https://fluxian8n-n8n.mpgtdy.easypanel.host/webhook/79ad7cbc-afc5-4d9b-967f-4f187d028a20",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            funcion: "historial_etiquetas",
            usuario: username,
          })
        }
      );
    
    const mensaje = respuesta?.Mensaje || (Array.isArray(respuesta) && respuesta[0]?.Mensaje);
    
    if (!mensaje || mensaje.trim() === "") {
        mostrarMensaje("üìÑ No ten√©s historial de etiquetas.", false);
        return;
    }

    const contenidoHistorial = mensaje.split("\n\n").filter(b => b.trim() !== "").map(b => `<p>${b.replace(/\n/g, "<br>")}</p>`).join("");
    document.getElementById("contenidoHistorial").innerHTML = contenidoHistorial;
    ocultarTodosLosFormularios();
    document.getElementById("panelMisEtiquetas").classList.remove("hidden");

  } catch (error) {
    console.error("Error obteniendo historial:", error);
    mostrarMensaje("‚ùå Error al consultar el historial.", true);
  }
}


/* ===========================
    Inicializaci√≥n y exports
    =========================== */

// üöÄ INICIALIZACI√ìN
document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("loginForm").addEventListener("submit", (e) => {
    e.preventDefault();
    login();
  });

  const fotoInput = document.getElementById("fotoOdometro");
  fotoInput.addEventListener("change", (e) => {
    const preview = document.getElementById("fotoPreview");
    if (e.target.files && e.target.files[0]) {
      preview.src = URL.createObjectURL(e.target.files[0]);
      preview.style.display = "block";
    } else {
      preview.style.display = "none";
    }
  });
});

// Exponer funciones globales para los onclick del HTML
Object.assign(window, {
  login,
  showKmForm,
  showEtiquetaForm,
  showCargaEtiquetas,
  volver,
  enviarKM,
  enviarEtiqueta,
  registrarEtiquetas,
  obtenerHistorialEtiquetas
});
